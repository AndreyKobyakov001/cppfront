initializer {
            expression {
              expr_statement {
                expr_expression {
                  expr_assignment {
                    expr_logical_or {
                      expr_logical_and {
                        expr_bit_or {
                          expr_bit_xor {
                            expr_bit_and {
                              expr_equality {
                                expr_relational {
                                  expr_compare {
                                    expr_shift {
                                      expr_additive {
                                        expr_multiplicative {
                                          expr_is_as {
                                            expr_prefix {
                                              expr_postfix {
                                                declaration {
                                                  captures {
                                                  }
                                                  a_function {
                                                    parameters {
                                                      open_paren {
                                                        value: "("
                                                      }
                                                      close_paren {
                                                        value: ")"
                                                      }
                                                      parameters {
                                                        pass: inout
                                                        mod: none
                                                        declaration {
                                                          captures {
                                                          }
                                                          identifier {
                                                            identifier {
                                                              value: "x"
                                                            }
                                                          }
                                                          an_object {
                                                            dereference_cnt: 0
                                                            unqualified {
                                                              identifier {
                                                                value: "_"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                    throws: false
                                                  }
                                                  initializer {
                                                    expression {
                                                      expr_statement {
                                                        expr_expression {
                                                          expr_assignment {
                                                            expr_logical_or {
                                                              expr_logical_and {
                                                                expr_bit_or {
                                                                  expr_bit_xor {
                                                                    expr_bit_and {
                                                                      expr_equality {
                                                                        expr_relational {
                                                                          expr_compare {
                                                                            expr_shift {
                                                                              expr_additive {
                                                                                expr_multiplicative {
                                                                                  expr_is_as {
                                                                                    expr_prefix {
                                                                                      expr_postfix {
                                                                                        id_expression {
                                                                                          unqualified {
                                                                                            identifier {
                                                                                              value: "x"
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                          terms {
                                                            op {
                                                              value: "+="
                                                            }
                                                            expr {
                                                              expr_logical_or {
                                                                expr_logical_and {
                                                                  expr_bit_or {
                                                                    expr_bit_xor {
                                                                      expr_bit_and {
                                                                        expr_equality {
                                                                          expr_relational {
                                                                            expr_compare {
                                                                              expr_shift {
                                                                                expr_additive {
                                                                                  expr_multiplicative {
                                                                                    expr_is_as {
                                                                                      expr_prefix {
                                                                                        expr_postfix {
                                                                                          literal {
                                                                                            literal {
                                                                                              value: "\" maybe\""
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      has_semicolon: true
                                                    }
                                                    emitted: false
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              has_semicolon: true
            }
            emitted: false
          }
        }
        emitted: false
      }